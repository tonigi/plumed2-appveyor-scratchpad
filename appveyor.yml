# image
image: Visual Studio 2022

# build platform
platform: x64

# TG. The list of steps is in https://www.appveyor.com/docs/build-configuration/

#     Some conflicts found: packages m2-make (ok) vs make both provide "make"
#      "rm" et al. are provided by "git" in appveyor (incompatible with m2-*)


# TG. the "call" below can be adjusted for the desired miniconda version
init:
  - ps: Set-WinUserLanguageList -Force 'it-IT'
  - cmd: call \miniconda38-x64\scripts\activate
  - cmd: conda info

# TG. if this is moved to the plumed repo, the "clone" paths will need to be adjusted.
# This check-outs under \project\reponame, i.e. %APPVEYOR_BUILD_FOLDER%
clone_script:
  - cmd: |
      cd
      git clone --depth=5 https://github.com/plumed/plumed2.git
      git clone https://github.com/tonigi/plumed-feedstock.git

# TG. remove this if building in CI
install:  
  - cmd: conda install -y -c tonigi plumed
  
# TG. How to build the "main" branch using the conda-build machinery? I don't know. 
# Perhaps we can create a recipe pointing to plumed2's main. The recipe may upload the
# built package as an artifact, or a test channel in conda-forge. Then this repo may start.
build_script:
  - cmd: |
      cd %APPVEYOR_BUILD_FOLDER%
      cd plumed-feedstock
      dir recipe
#      conda install -y conda-build
#      conda build recipe


test_script:
  - cmd: |
      conda install -y -c conda-forge m2-base make m2-sed m2-diffutils
      set PLUMED_ROOT=%CONDA_PREFIX%\lib\plumed
      cd %APPVEYOR_BUILD_FOLDER%
      make -C plumed2\regtest\basic

after_test:
  - cmd: |
       cd %APPVEYOR_BUILD_FOLDER%
       cd plumed2\regtest
       7z a -r  %APPVEYOR_BUILD_FOLDER%\regtests.zip report.txt

artifacts:
  - path: regtests.zip 
    name: w64-regtests


#     For interactive debugging see https://www.appveyor.com/docs/how-to/rdp-to-build-worker/
on_finish:
  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

